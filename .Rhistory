clipped = NA,
selection_length = NA
)
}
# Return detections for the given sound file
# Write a unique csv per sound file; remember to put all recordings in single directory on OSC
write.csv(detections, file = file.path(outpath, paste("automatic_detections_", wavs[w], ".csv", sep = "")), row.names = FALSE)
} else {
if(!file.exists(WavError)) {
cat(paste(wavs[w], "could not be read into R\n"), file = WavError, append = FALSE)
} else if(file.exists(WavError)) {
cat(paste(wavs[w], "could not be read into R\n"), file = WavError, append = TRUE)
}
}
}))
}
wavs <- list.files(path = "~/Downloads/delete/")
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = outpath, lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
library(pbapply)
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = outpath, lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
ed
wavs
wavs = wavs
path = "~/Downloads/delete/"
wavs <- list.files(path = "~/Downloads/delete/", pattern = "")
library(warbleR)
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
source("~/Downloads/delete/energyDetector.R")
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
wavs <- wavs[1:2]
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
ed
path = "~/Downloads/delete/"
source("~/Downloads/delete/energyDetector.R")
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
ed
wavs = wavs
path = "~/Downloads/delete/"
outpath = "~/Downloads/delete/out"
lowerfreq = 40000
higherfreq = 100000
energyoffset = 2.5
amplitudethreshold = 0.01
spec_fft_size = 512
spec_fft_shift = 4
spec_energy_floor = -120
truncate = FALSE
shouldplot = FALSE
strategy = "hybrid"
boundarystrategy = "amplitude"
compute_energy_mask <- function(spec, freqs, lowerfreq, higherfreq, energyoffset){
# Calculate the energy index of the lower and upper bounds
fix_low <- which(freqs == min(freqs[freqs > lowerfreq]))
fix_high <- which(freqs == min(freqs[freqs > higherfreq]))
# Get the log of the summed spectral energies per timestep
# In other words, per timestep, sum the spectral energies over the given indices, then take the log
v <- sapply(1:length(spec), function(i){
log(sum(spec[[i]][fix_low:fix_high]))
})
# Calculate the energy threshold for masking from the median energy
threshold <- median(v) + energyoffset
# Perform the energy masking, return the Boolean mask
mask <- v > threshold
# Return the Boolean mask and the log summed spectral densities
return(list(spec_mask = mask, log_sum_energy = v))
}
lowpass <- function(signal, fs, cutoff){
# Initialize the filter itself
bf <- signal::butter(n = 1, W = cutoff / (fs / 2), type = "low")
# Apply the filter to the given signal
filt_signal <- signal::filter(bf, signal)
return(filt_signal)
}
remove_segment_gaps <- function(mask, freq){
# Mask is already Boolean
detection <- mask
detectionchange <- c(0, diff(as.integer(detection)))
lookaheadwindow <- 0.001*freq
onsets <- which(detectionchange > 0)
offsets <- which(detectionchange < 0)
# Only remove gaps if there is more than one detection
if(length(offsets) > 1){
for(i in 1:(length(offsets) - 1)){
# If the difference between the given offset and the next onset is too short, remove offset
if((onsets[i + 1] - offsets[i]) < lookaheadwindow){
detection[offsets[i]:onsets[i + 1]] <- TRUE
}
}
}
return(detection)
}
compute_amplitude_mask <- function(wav, freq, amplitudethreshold){
# Get local envelope, smooth with low-pass filter
envelope <- seewave::env(wav, f = wav@samp.rate, envt = "hil", plot = FALSE)
smoothedenvelope <- lowpass(envelope, freq, freq/50)
# Perform masking on just the amplitude envelope, Boolean result
detection <- (smoothedenvelope > amplitudethreshold)
# unique(detection)
# which(detection)
# If this fails, just take the detection object, can add a tryCatch as needed
detection2 <- remove_segment_gaps(mask = detection, freq = freq)
return(list(amp_mask = detection2, smoothedenvelope = smoothedenvelope))
}
mask2segment <- function(mask){
change <- c(0, diff(as.integer(mask)))
onsets <- which(change > 0)
offsets <- which(change < 0)
# 139 offsets and onsets. At this point in his script, Eric has only 15
if(length(onsets) > length(offsets)){
onsets <- onsets[0:length(offsets)]
}
if(length(offsets) > length(onsets)){
offsets <- offsets[length(offsets) - length(onsets):length(offsets)]
}
return(data.frame(onsets, offsets))
}
align_segments <- function(energymask, amplitudemask, energytime, amplitudetime, freq){
amplitudemask2 <- remove_segment_gaps(amplitudemask, freq)
amplitudesegments <- mask2segment(amplitudemask2)
# energysegments doesn't exist yet
# if(nrow(energysegments) > 0){
# Upsample energysegments to amplitudetime
energysegments <- mask2segment(energymask)
upsampleenergymask <- rep(0, length(amplitudemask2))
if (nrow(energysegments) > 0 & all(complete.cases(energysegments))) {
# i <- 1
for(i in 1:nrow(energysegments)){
segstart <- as.integer(energytime[energysegments[i, 1]]*freq)
segend <- as.integer(energytime[energysegments[i, 2]]*freq)
upsampleenergymask[segstart:segend] <- 1
}
energysegments <- mask2segment(upsampleenergymask)
}
# Algorithm: find regions where both measures make a detection
# Fill in any gaps between detected regions < 1ms
# Run this only if both energysegments and amplitudesegments actually contain detections
if(nrow(energysegments) > 0 & all(complete.cases(energysegments)) & nrow(amplitudesegments) > 0 & all(complete.cases(amplitudesegments))){
# ################################ TESTING ###########################################
#
# i <- 1
# j <- 1
emask <- as.logical(rep(1, nrow(energysegments)))
amask <- as.logical(rep(1, nrow(amplitudesegments)))
#
# while (i < nrow(energysegments) & j < nrow(amplitudesegments)){
#
#   # cat(paste("i = ", i, "j = ", j, "\n"))
#
#   # Detect whether centroid falls in each range
#   # Julia and I corrected calculation of the midpoint
#   ecentroid <- ((energysegments[i, 2] - energysegments[i, 1])/2) + energysegments[i, 1]
#   if(ecentroid < amplitudesegments[j, 1]){
#     emask[i] <- FALSE
#   }
#
#   # i <- i + 1
#
#   acentroid <- ((amplitudesegments[j, 2] - amplitudesegments[j, 1])/2) + amplitudesegments[j, 1]
#   if(acentroid < energysegments[i, 1]){
#     amask[j] <- FALSE
#   }
#
#   i <- i + 1
#   j <- j + 1
#
#   # Eric's note:
#   # CHECK THIS: there may be weird cases where the above doesn't catch something mutually overlapping, continue
#   # i <- i + 1
#   # j <- j + 1
#
#   if(i < nrow(energysegments)){
#     emask[i:length(emask)] <- FALSE
#   }
#   if(j < nrow(amplitudesegments)){
#     amask[j:length(amask)] <- FALSE
#   }
#
#   # energysegments <- energysegments[emask:length(energysegments)] #? or below
#   energysegments <- energysegments[emask, ]
#   # amplitudesegments <- amplitudesegments[amask:length(amplitudesegments)] # ? or below
#   amplitudesegments <- amplitudesegments[amask, ]
#
# }
# Try a different approach from the while loop to check whether there are mutually overlapping detections
# These objects contain indices
energysegment_overlaps <- which(energysegments$onsets >= min(amplitudesegments$onsets) & energysegments$offsets <= max(amplitudesegments$offsets))
amplitudesegment_overlaps <- which(amplitudesegments$onsets >= min(energysegments$onsets) & amplitudesegments$offsets <= max(energysegments$offsets))
# Create masks using indices of the overlapping sections
emask[-energysegment_overlaps] <- FALSE
# emask # Indices not found to overlap with amplitude detections are set to FALSE
amask[-amplitudesegment_overlaps] <- FALSE
# amask # Indices not found to overlap with energy detections are set to FALSE
# Apply the masks to the energysegments and amplitudesegments objects
# This will return only indices with values of TRUE, e.g. only overlapping detections will be retained
energysegments <- energysegments[emask, ]
amplitudesegments <- amplitudesegments[amask, ]
################################################################################################
# Check whether the energy and amplitude segments still have data after masking
if(nrow(energysegments) == 0){
energysegments <- data.frame(onsets = NA, offsets = NA)
}
if(nrow(amplitudesegments) == 0){
amplitudesegments <- data.frame(onsets = NA, offsets = NA)
}
} else if(nrow(energysegments) == 0 & nrow(amplitudesegments) > 0){
amplitudesegments <- amplitudesegments
energysegments <- data.frame(onsets = NA, offsets = NA)
} else if(nrow(energysegments) > 0 & nrow(amplitudesegments) == 0){
energysegments <- energysegments
amplitudesegments <- data.frame(onsets = NA, offsets = NA)
}
return(list(energysegments = energysegments, amplitudesegments = amplitudesegments))
}
segment2mask <- function(segments, lngth){
mask <- rep(0, lngth)
# Only perform masking if there are actually segments
if(!all(is.na(segments$onsets)) & !all(is.na(segments$offsets))){
for(i in 1:nrow(segments)){
mask[segments[i, 1]:segments[i, 2]] <- 1
}
}
return(mask)
}
resolve_mask <- function(frequencymask, amplitudemask, t, tm, strategy, boundarystrategy, freq = freq){
if(strategy == "frequency"){
if(boundarystrategy == "frequency" | boundarystrategy == "same"){
return(list(combined_mask = frequencymask, combined_segs = mask2segment(frequencymask), t = t))
} else{
stop('frequency strategy only works with boundarystrategy of frequency or same')
}
} else if(strategy == "amplitude"){
if(boundarystrategy == "amplitude" | boundarystrategy == "same"){
return(list(combined_mask = amplitudemask, combined_segs = mask2segment(amplitudemask), tm = tm))
} else {
stop('amplitude strategy only works with boundarystrategy of amplitude or same')
}
# Hybrid strategy
# Returns only segments in both
} else {
align_res <- align_segments(frequencymask, amplitudemask, t, tm, freq)
frequency_segments <- align_res$energysegments
amplitude_segments <- align_res$amplitudesegments
if (boundarystrategy == "frequency"){
return(list(combined_mask = segment2mask(frequency_segments, length(frequencymask)), combined_segs = frequency_segments))
} else if(boundarystrategy == "amplitude"){
return(list(combined_mask = segment2mask(amplitude_segments, length(amplitudemask)), combined_segs = amplitude_segments))
} else {
# I think equivalent is t(c(vector1, vector2))
# combined_segments=np.transpose(np.vstack((amplitude_segments[:,0],frequency_segments[:,1])))
# Combine the amplitude and hybrid streams by taking the amplitude start indices and the frequency end indices
combined_segments <- data.frame(onset = amplitude_segments[, 1], offset = frequency_segments[, 2])
return(list(combined_mask = segment2mask(combined_segments, length(amplitudemask)), combined_segs = combined_segments))
}
}
}
# C
autocorr <- function(x){
# Note that the values in tmp are many orders of magnitude greater than those that Eric's code returns, seems due to differences in cross-correlation implementation between R and Python
tmp <- ccf(x, x, lag.max = length(x), plot = FALSE, type = "correlation")
return(tmp$acf[ceiling((length(tmp$acf)/2)):length(tmp$acf)])
}
pitch <- function(x, freqix, minfreq = 15000){
cc <- autocorr(x)
cc[freqix < minfreq] <- 0
maxix <- which(cc == max(cc))
p <- freqix[maxix]
# Check for pitch doubling/tripling, hacky bit of code
if((cc[floor(maxix/2)] / cc[maxix]) > 0.2){
p <- freqix[floor(maxix/2)]
} else if((cc[floor(maxix/3)] / cc[maxix]) > 0.2){
p <- freqix[floor(maxix/3)]
}
return(p)
}
WavError <- file.path(path, paste(paste("energyDetectorLog", Sys.Date(), sep = "_"), ".txt", sep = ""))
w <- wavs[1]
# Read in Wave data in 16-bit format; return error if not a Wave
obj <- try(readWave(file.path(path, wavs[w])), silent = TRUE)
obj
w = 1
# Read in Wave data in 16-bit format; return error if not a Wave
obj <- try(readWave(file.path(path, wavs[w])), silent = TRUE)
obj
# By default, Eric's Python code relies on sf.read from soundfile package to read in the .wav data as Float64: https://pysoundfile.readthedocs.io/en/latest/
# Perform rescaling with tuneR, note that no normalization (rescale) was performed, to match Eric's code
# The resulting data is the closest to Eric's results that I've gotten, and are the right order of magnitude
# I think something is happening here with amplitude values...is this the right order of magnitude? Also "unit64" should scale from [-1, 1]...yep, added the argument pcm = FALSE and this looks better
wav <- tuneR::normalize(obj, unit = "64", rescale = FALSE, pcm = FALSE)
# Get amplitude values (e.g. the sampled data)
dats <- wav@left
freq <- wav@samp.rate
xmin <- 0
xmax <- length(dats)/freq
# Remove signal mean to zero-center (e.g. remove DC offset)
dats <- (dats - mean(dats))
spec_dens <- tuneR::periodogram(wav, width = spec_fft_size, overlap = spec_fft_size - spec_fft_shift, normalize = FALSE, downsample = 250000, channel = "left", units = "samples", taper = 0)
str(spec_dens)
str(spec_dens)
str(spec_dens@freq)
str(spec_dens@spec)
# In Python, the spec object is made by calling the function specgram: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.specgram.html. Just saw that Eric did this with sampling rate 250000, but downsampling makes no difference
spec <- spec_dens@spec # These numbers are different than Eric's object, which are e-12 or e-3
freqs <- spec_dens@freq
# Get the energy mask in order to test subsequent translated functions
energy_mask_res <- compute_energy_mask(spec = spec, freqs = freq, lowerfreq = lowerfreq, higherfreq = higherfreq, energyoffset = energyoffset)
# Get the amplitude mask results to keep testing
amp_mask_res <- compute_amplitude_mask(wav = wav, freq = freq, amplitudethreshold = amplitudethreshold)
# Sample temporal coordinates
# Purpose: Compute times per each sample in the data (e.g. each data point, not each detection). Here these look exactly like those returned by Eric's code
tm <- xmin + seq(1, length(dats), 1)/freq
tm
# Temporal midpoints of periodogram windows
# The times corresponding to midpoints of segments (i.e., the columns in spectrum), returned by Python specgram
mids <- (spec_dens@starts + unique(diff(spec_dens@starts)/2)) # Indices
t <- tm[mids] # A bit off from Eric's numbers
combined_res <- resolve_mask(frequencymask = energy_mask_res$spec_mask, amplitudemask = amp_mask_res$amp_mask, t = t, tm = tm, strategy = strategy, boundarystrategy = boundarystrategy, freq = freq)
detections <- combined_res$combined_segs
detections
wav_info(path = "~/Downloads/delete/")
wavs <- list.files(path = "~/Downloads/delete/", pattern = "")
wavs
wavs <- list.files(path = "~/Downloads/delete/", pattern = ".wav$", ignore.case = TRUE)
wavs
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
ed
ed <- energyDetector(wavs = wavs, path = "~/Downloads/delete/", outpath = "~/Downloads/delete/out", lowerfreq = 40000, higherfreq = 100000, energyoffset = 2.5, amplitudethreshold = 0.01, spec_fft_size = 512, spec_fft_shift = 4, spec_energy_floor = -120, truncate = FALSE, shouldplot = FALSE, strategy = "hybrid", boundarystrategy = "amplitude")
ed
source("~/Downloads/delete/energyDetector.R")
source("~/Downloads/delete/energyDetector.R", echo=TRUE)
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4","lbh_selec_table"))
#save sound files
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# run cross correlation on spectrograms (SPCC)
xcor <- cross_correlation(X = lbh_selec_table, wl = 300, ovlp = 90, path = tempdir())
xcor
library(warbleR)
cns <- consolidate(path = "/media/m/CHIRINO/Grabaciones SM4 2019", dest.path = "/home/m/Dropbox/Recordings/Agalychnis_lemur", parallel = 10)
library(phonTools)
library(audio)
library(tuneR)
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "ranger", "kableExtra", "DT", "maRce10/ohun", "ggplot2")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "ranger", "kableExtra", "DT", "maRce10/ohun", "ggplot2")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
ifs <- info_sound_files(path = "/home/m/Área de Trabalho/audios_alcohol_0")
# revisar q samp rate es 200
info_sound_files(path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files")
energy_detector(path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/",
thinning = 0.5, bp = c(35, 90), smooth = 5, threshold = 1,
hold.time = 5, min.duration = 1, max.duration = 150,
parallel = 1)
saveRDS(detection, "/home/m/Área de Trabalho/audios_alcohol_0/detection_55kHz_without_bedding_alcohol_0.RDS")
detection <- energy_detector(path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/",
thinning = 0.5, bp = c(35, 90), smooth = 5, threshold = 1,
hold.time = 5, min.duration = 1, max.duration = 150,
parallel = 1)
# detection <- energy_detector(threshold = 1, min.duration = 1, smooth = 5, hold.time = 5, thinning = 0.5, parallel = 1, bp = c
# (35, 90), max.duration = 15, path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/")
saveRDS(detection, "/home/m/Área de Trabalho/audios_alcohol_0/detection_55kHz_without_bedding_alcohol_0.RDS")
detection <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/detection_55kHz_without_bedding_alcohol_0.RDS")
spectral_parameters <- spectro_analysis(detection, bp = c(35, 85), fast = TRUE, ovlp = 70, parallel = 1, path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/")
# leer el modelo
# rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_no_bedding.RDS")
rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/data_and_model_random_forest_55kHz_no_bedding.RDS")
sapply(spectral_parameters, function(x) sum(is.na(x)))
detection <- detection[!is.na(spectral_parameters$meandom), ]
spectral_parameters <- spectral_parameters[!is.na(spectral_parameters$meandom), ]
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
# remover los sonidos clasificados como ruido de fondo
filtered_detection <- detection[detection$class == "true.positive", ]
saveRDS(filtered_detection, "/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.RDS")
filtered_detection <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.RDS")
write.csv(filtered_detection, "/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.csv", row.names = FALSE)
counts <- aggregate(selec ~ sound.files, filtered_detection, length)
names(counts)[2] <- "55khz.call.count"
write.csv(counts, "/home/m/Área de Trabalho/audios_alcohol_0/counts_per_sound_files_detection_55kHz_without_bedding_alcohol_0.csv", row.names = FALSE)
counts
# leer el modelo
# rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_no_bedding.RDS")
rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_no_bedding.RDS")
sapply(spectral_parameters, function(x) sum(is.na(x)))
detection <- detection[!is.na(spectral_parameters$meandom), ]
spectral_parameters <- spectral_parameters[!is.na(spectral_parameters$meandom), ]
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
# leer el modelo
# rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_no_bedding.RDS")
rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_with_bedding.RDS")
sapply(spectral_parameters, function(x) sum(is.na(x)))
detection <- detection[!is.na(spectral_parameters$meandom), ]
spectral_parameters <- spectral_parameters[!is.na(spectral_parameters$meandom), ]
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
rf_model <- readRDS("/home/m/Dropbox/Projects/rat_ultrasonic_vocalizations/data/processed/random_forest_55kHz_no_bedding.RDS")
sapply(spectral_parameters, function(x) sum(is.na(x)))
detection <- detection[!is.na(spectral_parameters$meandom), ]
spectral_parameters <- spectral_parameters[!is.na(spectral_parameters$meandom), ]
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
rf_model <- readRDS("/home/m/Dropbox/Projects/rat_ultrasonic_vocalizations/data/processed/random_forest_55kHz_with_bedding.RDS")
sapply(spectral_parameters, function(x) sum(is.na(x)))
detection <- detection[!is.na(spectral_parameters$meandom), ]
spectral_parameters <- spectral_parameters[!is.na(spectral_parameters$meandom), ]
rf_model <- readRDS("/home/m/Dropbox/Projects/rat_ultrasonic_vocalizations/data/processed/random_forest_55kHz_with_bedding.RDS")
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
table(detection$class)
# remover los sonidos clasificados como ruido de fondo
filtered_detection <- detection[detection$class == "true.positive", ]
counts <- aggregate(selec ~ sound.files, filtered_detection, length)
counts
# leer el modelo
rf_model <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_55kHz_no_bedding.RDS")
# aplicarlo sobre las detecciones nuevas
detection$class <- predict(object = rf_model, data = spectral_parameters)$predictions
table(detection$class)
# remover los sonidos clasificados como ruido de fondo
filtered_detection <- detection[detection$class == "true.positive", ]
saveRDS(filtered_detection, "/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.RDS")
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "ranger", "kableExtra", "DT", "maRce10/ohun", "ggplot2", "Rraven")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
exp_raven(X = filtered_detection, file.name = "/home/m/Área de Trabalho/audios_alcohol_0/filtered_detections", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/)
exp_raven(X = filtered_detection, file.name = "/home/m/Área de Trabalho/audios_alcohol_0/filtered_detections", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/)
exp_raven(X = filtered_detection, file.name = "/home/m/Área de Trabalho/audios_alcohol_0/filtered_detections", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/")
filtered_detection
filtered_detection$bottom.freq <- 35
filtered_detection$top.freq <- 85
exp_raven(X = filtered_detection, file.name = "/home/m/Área de Trabalho/audios_alcohol_0/filtered_detections", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/")
exp_raven(X = filtered_detection, file.name = "/home/m/Área de Trabalho/audios_alcohol_0/filtered_detections.txt", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/")
exp_raven(X = filtered_detection, file.name = "filtered_detections.txt", sound.file.path = "/home/m/Área de Trabalho/audios_alcohol_0/converted_sound_files/", path = "/home/m/Área de Trabalho/audios_alcohol_0/")
filtered_detection <- readRDS("/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.RDS")
write.csv(filtered_detection, "/home/m/Área de Trabalho/audios_alcohol_0/random_forest_filtered_detection_55kHz_without_bedding_alcohol_0.csv", row.names = FALSE)
counts <- aggregate(selec ~ sound.files, filtered_detection, length)
metadat <- read.csv("/home/m/Área de Trabalho/audios_alcohol_0/file_names_info.csv")
metadat
metadat$tanda <- sapply(metadat$original_dir, function(x) strsplit(metadat$original_dir, split = "/")[[1]][[2]])
metadat$tanda
metadat$tanda <- sapply(metadat$original_dir, function(x) strsplit(metadat$original_dir, split = "/")[[1]][[3]])
metadat$tanda
metadat$tanda <- gsub("tanda", "", metadat$tanda)
metadat$tanda
metadat$canal <- sapply(metadat$original_dir, function(x) strsplit(metadat$original_dir, split = "/")[[1]][[4]])
metadat$canal
metadat$canal <- substr(sapply(metadat$original_dir, function(x) strsplit(metadat$original_dir, split = "/")[[1]][[4]]), 0, 1)
metadat$canal
metadat
metadat$tanda <- sapply(metadat$original_dir, function(x) strsplit(x, split = "/")[[1]][[3]])
metadat$tanda <- gsub("tanda", "", metadat$tanda)
metadat$canal <- substr(sapply(metadat$original_dir, function(x) strsplit(x, split = "/")[[1]][[4]]), 0, 1)
View(metadat)
counts
x %in% counts$sound.files
metadat$call.count <- sapply(metadat$new_name, function(x)
if (any(x %in% counts$sound.files)) counts$selec[counts$sound.files == x] else 0
)
metadat$call.count
metadat
View(metadat)
metadat$file_size_bytes <- metadat$duplicate <- NULL
write.csv(metadat, "/home/m/Área de Trabalho/audios_alcohol_0/counts_per_sound_files_detection_55kHz_without_bedding_alcohol_0.csv", row.names = FALSE)
remove.packages("sketchy")
remotes::install_github("maRce10/sketchy")
library(sketchy)
make_compendium("owl_vocal_complexity", path = "~/Dropbox/Projects/", format = "sketchy", git = TRUE, Rproj = TRUE, readme = TRUE)
sketchy::make_compendium(name = "ohun_paper_data", path = "~/Dropbox/Projects/", format = "sketchy", packrat = TRUE, git = TRUE, readme = TRUE, Rproj = TRUE)
library(sketchy)
sketchy::make_compendium(name = "ohun_paper_data", path = "~/Dropbox/Projects/", format = "sketchy", packrat = TRUE, git = TRUE, readme = TRUE, Rproj = TRUE)
